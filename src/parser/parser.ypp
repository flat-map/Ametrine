%skeleton "lalr1.cc"
%require "3.5.1"
%defines
%define api.parser.class {MyParser}
%parse-param {MyLexer &lexer}
%lex-param   {MyLexer &lexer}

%code requires {
	#include <string>
	using std::string;
	#include <src/ast/ast.hpp>
	//#include <src/lexer/lexer.hpp>
	using namespace ast;
	class MyLexer;
}

%code provides {
	int yylex(
		yy::MyParser::semantic_type* yylval,
		yy::MyParser::location_type* location,
		MyLexer& lexer
	);
}

%locations
%define api.value.type variant
%define parse.error verbose

%token <double> DOUBLE_LITERAL "double_literal"
%token SEMICOLON ";"

%type <Expression*> expression

%start module

%%

module
	: expression ";" {
		std::cout << $1->getValue() << std::endl;
	}
	;

expression
	: "double_literal" {
		$$ = new DoubleExpression($1);
	}
	;
%%

void yy::MyParser::error(
	const location_type& loc,
	const string& msg
){
	std::cerr << loc << ": " << msg << std::endl;
}