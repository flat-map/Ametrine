%{
    #include <build/parser.tab.hpp>
    using std::string;

    #include <src/lexer/lexer.hpp>

    #undef YY_DECL
    #define YY_DECL int MyLexer::yylex(yy::MyParser::semantic_type& lval, yy::MyParser::location_type& loc)

    #define YY_USER_ACTION loc.columns(yyleng);

    #define TOKEN(t) yy::MyParser::token::t
%}
%option yyclass = "MyLexer"
%option noyywrap nounput noinput batch debug c++

identity [a-zA-Z][a-zA-Z0-9_]*
number   -?[0-9]+(.[0-9]+)?

%%

%{
    loc.begin.filename = &filenames[cur_fid];
    loc.end.filename = &filenames[cur_fid];
    loc.step();
%}

{number} {
    lval.build<double>() = std::stod(yytext);
    return TOKEN(NUMBER);
}

[ \t]+ {
    loc.step();
}

\r\n|\r|\n {
    loc.lines();
    loc.step();
}

. {
    std::cerr << "Lexer: Unrecognized character '" << yytext[0] << "'" << std::endl;
}

%%

int yylex(
    yy::MyParser::semantic_type* yylval,
    yy::MyParser::location_type* location,
    MyLexer& lexer)
{
    return lexer.yylex(*yylval, *location);
}

void MyLexer::set_filename(const string& filename) {
    filenames.push_back(filename);
    cur_fid = filenames.size() - 1;
}